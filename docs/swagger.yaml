definitions:
  controllers.pingMessage:
    properties:
      message:
        type: string
    type: object
  controllers.signInModel:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.signInReponse:
    properties:
      token:
        type: string
    type: object
  controllers.userResponse:
    properties:
      message:
        type: string
    type: object
  models.Book:
    properties:
      author:
        type: string
      category:
        type: integer
      createAt:
        type: string
      deleteAt:
        type: string
      id:
        type: integer
      price:
        type: number
      title:
        type: string
      updateAt:
        type: string
    type: object
  models.Category:
    properties:
      books:
        items:
          $ref: '#/definitions/models.Book'
        type: array
      createAt:
        type: string
      deleteAt:
        type: string
      id:
        type: integer
      name:
        type: string
      updateAt:
        type: string
    type: object
  models.CategoryInput:
    properties:
      name:
        type: string
    type: object
  models.CreateBookInput:
    properties:
      author:
        type: string
      category:
        type: integer
      price:
        type: number
      title:
        type: string
    required:
    - author
    - price
    - title
    type: object
  models.UserInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
paths:
  /book/:
    get:
      consumes:
      - application/json
      description: Get all books.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
      summary: Find books.
    post:
      consumes:
      - application/json
      description: Create a book.
      parameters:
      - description: Book Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CreateBookInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CreateBookInput'
      summary: Create a book.
  /book/{id}/:
    get:
      consumes:
      - application/json
      description: Detail of a book by ID
      operationId: get-string-by-int
      parameters:
      - description: Book ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
      summary: Detail of a book.
  /category/:
    get:
      consumes:
      - application/json
      description: Create a category.
      parameters:
      - description: Category Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.Category'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Category'
            type: array
      summary: List categories.
    post:
      consumes:
      - application/json
      description: Create a category.
      parameters:
      - description: Category Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.CategoryInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Category'
      summary: Create a category.
  /ping/:
    get:
      consumes:
      - application/json
      description: Health Api.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.pingMessage'
      summary: Health api.
  /signin/:
    post:
      consumes:
      - application/json
      description: SignIn.
      parameters:
      - description: signIn Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/controllers.signInModel'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.signInReponse'
      summary: SignIn.
  /user/:
    post:
      consumes:
      - application/json
      description: Create an user.
      parameters:
      - description: user Data
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/models.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.userResponse'
      summary: Create an user.
swagger: "2.0"
